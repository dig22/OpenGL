/*Start */
            {
                glm::mat4 model = glm::translate(glm::mat4(1.0f), translationA);
                glm::mat4 mvp = proj * view * model;
                shader.Bind();
                //set the uniform
                shader.setUnifoirmMat4f("u_MVP", mvp);
                renderer.Draw(va, ib, shader);
            }

            {
                glm::mat4 model = glm::translate(glm::mat4(1.0f), translationB);
                glm::mat4 mvp = proj * view * model;
                shader.Bind();
                //set the uniform
                shader.setUnifoirmMat4f("u_MVP", mvp);
                renderer.Draw(va, ib, shader);

            }

            /* GLCall(glBindVertexArray(vao)); //just bind vertex array
                                            //  GLCall(glBindBuffer(GL_ELEMENT_ARRAY_BUFFER, ibo));  //just bind index buffer
            */

            /*va.Bind();
            ib.Bind(); //glBind abstracted
            */
            /*No longer needed due to VAO*/
            /* GLCall(glBindBuffer(GL_ARRAY_BUFFER, buffer));
         GLCall(glEnableVertexAttribArray(0));   may change for diffrent object*/
            /*  GLCall(glVertexAttribPointer(0, 2, GL_FLOAT, GL_FALSE, sizeof(float) * 2, (const void *)0 )); 
        */

            /*  GLCall(glDrawElements(GL_TRIANGLES, 6, GL_UNSIGNED_INT, nullptr)); //ibo already bound
        */
            if (red > 1.0f)
                increment = -0.05f;
            else if (red < 0.0f)
                increment = 0.05f;

            red += increment;

            /* glDrawArrays(GL_TRIANGLES, //Draw Triangle | // draws the binded buffer
                     0,            //Starting index of array               |
                     6);           // Draw Call for the buffer           |

        */

            {
                static float f = 0.0f;
                static int counter = 0;
                ImGui::SliderFloat3("Translation A", &translationA.x, 0.0f, 960.0f); // Edit 1 float using a slider from 0.0f to 1.0f
                ImGui::SliderFloat3("Translation B", &translationB.x, 0.0f, 960.0f); 
                ImGui::Text("Application average %.3f ms/frame (%.1f FPS)", 1000.0f / ImGui::GetIO().Framerate, ImGui::GetIO().Framerate);
            }











/*End */

/*start */
     glm::vec3 translationA(200, 200, 0);
        glm::vec3 translationB(400, 200, 0);

        bool show_demo_window = true;
        bool show_another_window = false;
        ImVec4 clear_color = ImVec4(0.45f, 0.55f, 0.60f, 1.00f);

        float red = 0.0f;
        float increment = 0.05f;
/**/


/**/
         /*vertex array object*/
        unsigned int vao; //Hade to set glewExperimental = GL_TRUE;
        glGenVertexArrays(1, &vao);
        GLCall(glBindVertexArray(vao));

        VertexArray va;
        VertexBuffer vb(positions, 4 * 4 * sizeof(float)); //Automatically binds
        VertexBufferLayout layout;
        layout.PushFloat(2);
        layout.PushFloat(2);
        va.AddBuffer(vb, layout);

        IndexBuffer ib(indices, 6);

        glm::mat4 proj = glm::ortho(0.0f, 960.0f, 0.0f, 540.0f, -1.0f, 1.0f);
        glm::mat4 view = glm::translate(glm::mat4(1.0f), glm::vec3(0, 0, 0));
        /* glm::mat4 model = glm::translate(glm::mat4(1.0f), glm::vec3(200, 200, 0));

        glm::mat4 mvp = proj * view * model; //MVP or (PVM)
        */
        // has been shifted to the main loop
        glm::vec4 vp(100.0f, 100.0f, 0.0f, 1.0f); //for testing
        glm::vec4 result = proj * vp;             //^

        Shader shader("../res/shaders/basic.shader");

        shader.Bind();
        // shader.SetUniform4f("u_Color", 0.8f, 0.3f, 0.8f, 1.0f);

        Texture texture("../res/textures/logo.png");
        texture.Bind();

        shader.SetUniform1i("u_Texture", 0);

        /*unbind everything*/
        GLCall(glBindVertexArray(0));
        va.Unbind();
        vb.Unbind();
        ib.Unbind();
        shader.Unbind();
/**/


/**/

      float positions[] = {
            -50.0f, -50.0f, 0.0f, 0.0f, //0
            50.0f, -50.0f, 1.0f, 0.0f,  //1
            50.0f, 50.0f, 1.0f, 1.0f,   //2
            -50.0f, 50.0f, 0.0f, 1.0f,  //3
        };

        unsigned int indices[] = {
            0, 1, 2,
            2, 3, 0};

/**/